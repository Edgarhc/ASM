apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
	
	
    defaultConfig {
		
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
		
		//multiDexEnabled true
		
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
	
	compile 'com.android.support:multidex:+'
	
    compile fileTree(dir: 'libs', include: ['*.jar'])
	
	compile 'com.squareup.okhttp3:okhttp:3.11.0'
	compile 'org.apache.maven:maven-model:3.5.4'
	compile 'org.apache.maven:maven-repository-metadata:3.5.+'
	
	//compile group: 'com.android.tools:sdklib:23.0.0'
	
	compile 'com.google.android.tools:dx:+'
	
	compile 'org.eclipse.jdt.core.compiler:ecj:3.+'
    //compile 'org.apache.ant:ant:1.8.+'
	compile 'javax.annotation:javax.annotation-api:1.3.2'
	//compile project(':interface')
	
	compile 'com.android.support:support-annotations:20.0.0'
	compile 'com.android.tools:common:22.0'
}

task deleteOldJar(type: Delete) {
    delete 'libs/{moduleName}.jar'
}

//task to export contents as jar
task exportJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/')
    include('classes.jar')
    ///Give whatever name you want to give
    rename('classes.jar', '{moduleName}.jar')
}

exportJar.dependsOn(deleteOldJar, build)
